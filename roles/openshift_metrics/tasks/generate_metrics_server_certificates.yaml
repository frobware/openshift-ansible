---

- name: generate metrics-server certificates
  include_tasks: setup_certificate.yaml
  vars:
    component: metrics-server
    hostnames: "metrics-server,metrics-server.{{ openshift_metrics_project }}.svc.cluster.local,{{ openshift_metrics_metrics_server_hostname }}"
  changed_when: no

- name: generate password for metrics_server metrics
  local_action: copy dest="{{ local_tmp.stdout }}/{{ item }}.pwd" content="{{ 15 | lib_utils_oo_random_word }}"
  with_items:
  - metrics-server
  become: false

- local_action: slurp src="{{ local_tmp.stdout }}/metrics-server.pwd"
  register: metrics_server_metrics_pwd
  no_log: true
  become: false

- name: generate htpasswd file for metrics_server metrics
  local_action: htpasswd path="{{ local_tmp.stdout }}/metrics-server.htpasswd" name=metrics_server password="{{ metrics_server_metrics_pwd.content | b64decode }}"
  become: false

- name: copy local generated passwords to target
  copy:
    src: "{{ local_tmp.stdout }}/{{ item }}"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  with_items:
  - metrics-server.pwd
  - metrics-server.htpasswd

- name: read files for the metrics-server secret
  shell: >
    printf '%s: ' '{{ item }}'
    && base64 --wrap 0 '{{ mktemp.stdout }}/{{ item }}'
  register: metrics_server_secrets
  with_items:
  - ca.crt
  - metrics-server.pwd
  - metrics-server.htpasswd
  - metrics-server.crt
  - metrics-server.key
  - metrics-server.pem
  changed_when: false

- set_fact:
    metrics_server_secrets: |
      {{ metrics_server_secrets.results|map(attribute='stdout')|join('
      ')|from_yaml }}

- slurp:
    src: "{{ mktemp.stdout }}/ca.crt"
  register: apiserver_ca

- name: generate metrics-server-certs secret template
  template:
    src: secret.j2
    dest: "{{ mktemp.stdout }}/templates/metrics-server-certs.yaml"
  vars:
    name: metrics-server-certs
    labels:
      metrics-infra: metrics-server-certs
    annotations:
      service.alpha.openshift.io/originating-service-name: metrics-server
    data:
      tls.crt: >
        {{ metrics_server_secrets['metrics-server.crt'] }}
      tls.key: >
        {{ metrics_server_secrets['metrics-server.key'] }}
      ca.crt: >
        {{ metrics_server_secrets['ca.crt'] }}
  when: name not in metrics_secrets.stdout_lines
  changed_when: no

- name: generate metrics-server-account secret template
  template:
    src: secret.j2
    dest: "{{ mktemp.stdout }}/templates/metrics-server_metrics_account.yaml"
  vars:
    name: metrics-server-account
    labels:
      metrics-infra: metrics-server
    data:
      metrics-server.username: "{{ 'metrics_server'|b64encode }}"
      metrics-server.htpasswd: "{{ metrics_server_secrets['metrics-server.htpasswd'] }}"
      metrics-server.password: >
        {{ metrics_server_secrets['metrics-server.pwd'] }}
  when: name not in metrics_secrets.stdout_lines
  changed_when: no













- name: Create api service
  oc_obj:
    name: v1beta1.metrics.k8s.io
    kind: apiservices.apiregistration.k8s.io
    namespace: kube-system
    content:
      path: /tmp/metricsserverapisvcout
      data:
        apiVersion: apiregistration.k8s.io/v1beta1
        kind: APIService
        metadata:
          name: v1beta1.metrics.k8s.io
          labels:
            kubernetes.io/cluster-service: "true"
            addonmanager.kubernetes.io/mode: Reconcile
        spec:
          group: metrics.k8s.io
          version: v1beta1
          selector:
            name: v1beta1.metrics.k8s.io
          service:
            name: metrics-server
            namespace: kube-system
          groupPriorityMinimum: 100
          versionPriority: 100
          insecureSkipTLSVerify: false
          caBundle: "{{ apiserver_ca.content }}"
